name: Build and Deploy Docs

on:
  # 1) Build docs when dev branch is pushed, or when any tag is pushed
  push:
    branches:
      - dev
    tags:
      - '*'

  # 2) Also build (and sync release notes) after your Publish Python Package workflow completes
  workflow_run:
    workflows: ["Publish Python Package"]
    types: [completed]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # Only run on dev‑branch pushes, tag pushes, or successful workflow_run
    if: ${{ github.event_name == 'push' || github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          # For workflow_run events, checkout the commit that triggered the original workflow
          ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Graphviz
        uses: ts-graphviz/setup-graphviz@v2

      - name: Cache Poetry packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}

      - name: Install Dependencies
        env:
          POETRY_DYNAMIC_VERSIONING_COMMANDS: install,build
        run: |
          set -e
          pip install poetry
          poetry self add "poetry-dynamic-versioning[plugin]"
          poetry install --with dev,docs

      - name: Debug git state and version
        run: |
          echo "=== Git State Debug ==="
          echo "Current commit: $(git rev-parse HEAD)"
          echo "Current ref: $GITHUB_REF"
          echo "Current ref name: $GITHUB_REF_NAME"
          echo "Tag at HEAD: $(git describe --tags --exact-match HEAD 2>/dev/null || echo 'No exact tag match')"
          echo "Latest tag: $(git describe --tags --abbrev=0 2>/dev/null || echo 'No tags found')"
          echo "=== Version Debug ==="
          poetry version
          echo "CORNETO __version__: $(poetry run python -c 'import corneto; print(corneto.__version__)')"

      - name: Determine doc version and deployment targets
        id: set_version
        run: |
          set -e
          case "${GITHUB_REF}" in
            refs/heads/dev)
              echo "doc_version=latest" >> $GITHUB_OUTPUT
              echo "deploy_to_stable=false" >> $GITHUB_OUTPUT
              ;;
            refs/tags/*)
              version="${GITHUB_REF#refs/tags/}"
              echo "doc_version=${version}" >> $GITHUB_OUTPUT
              echo "deploy_to_stable=true" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "Skipping docs for ref ${GITHUB_REF}" >&2
              exit 0
              ;;
          esac

      - name: Sync GitHub Releases to Docs
        if: ${{ github.event_name == 'workflow_run' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          echo "Syncing GitHub releases to documentation…"
          sleep 30    # ensure release API is updated
          python scripts/sync_releases.py --repo saezlab/corneto --docs-dir docs

      - name: Build Docs
        env:
          SPHINX_VERSION_MATCH: ${{ steps.set_version.outputs.doc_version }}
        run: |
          set -e
          poetry run sphinx-build -b html docs docs/_build/html

      - name: Get GitHub Pages URL via GH CLI
        id: pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "GH CLI version: $(gh --version)"
          echo "Fetching Pages URL for ${{ github.repository }}…"
          if page_url=$(gh api \
            -H "Accept: application/vnd.github.v3+json" \
            /repos/${{ github.repository }}/pages \
            --jq .html_url 2>/dev/null); then
            echo "PAGE_URL=${page_url}" >> $GITHUB_ENV
          else
            default_url="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
            echo "PAGE_URL=${default_url}" >> $GITHUB_ENV
          fi

      - name: Create root redirect to latest
        run: |
          set -e
          mkdir -p temp_root
          touch temp_root/.nojekyll
          if [ -f docs/custom-index.html ]; then
            cp docs/custom-index.html temp_root/index.html
          else
            cp docs/default-index.html temp_root/index.html
          fi

      - name: Deploy content to root
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./temp_root
          destination_dir: ./
          keep_files: true

      - name: Deploy versioned docs
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
          destination_dir: ${{ steps.set_version.outputs.doc_version }}

      - name: Deploy tagged version to stable folder
        if: ${{ steps.set_version.outputs.deploy_to_stable == 'true' }}
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
          destination_dir: stable

      - name: Clean up temporary files
        run: rm -rf temp_root
