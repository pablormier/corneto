Traceback (most recent call last):
  File "/home/runner/.cache/pypoetry/virtualenvs/corneto-lU1q7eKj-py3.11/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/runner/.cache/pypoetry/virtualenvs/corneto-lU1q7eKj-py3.11/lib/python3.11/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/.cache/pypoetry/virtualenvs/corneto-lU1q7eKj-py3.11/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/runner/.cache/pypoetry/virtualenvs/corneto-lU1q7eKj-py3.11/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/runner/.cache/pypoetry/virtualenvs/corneto-lU1q7eKj-py3.11/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/.cache/pypoetry/virtualenvs/corneto-lU1q7eKj-py3.11/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
c = CarnivalFlow(lambda_reg=0.0)
P = c.build(G, data)
P.solve(verbosity=0, solver="SCIP");
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
Cell [0;32mIn[4], line 2[0m
[1;32m      1[0m c [38;5;241m=[39m CarnivalFlow(lambda_reg[38;5;241m=[39m[38;5;241m0.0[39m)
[0;32m----> 2[0m P [38;5;241m=[39m [43mc[49m[38;5;241;43m.[39;49m[43mbuild[49m[43m([49m[43mG[49m[43m,[49m[43m [49m[43mdata[49m[43m)[49m
[1;32m      3[0m P[38;5;241m.[39msolve(verbosity[38;5;241m=[39m[38;5;241m0[39m, solver[38;5;241m=[39m[38;5;124m"[39m[38;5;124mSCIP[39m[38;5;124m"[39m);

File [0;32m~/work/corneto/corneto/corneto/methods/future/method.py:95[0m, in [0;36mMethod.build[0;34m(self, graph, data)[0m
[1;32m     77[0m [38;5;28;01mdef[39;00m[38;5;250m [39m[38;5;21mbuild[39m([38;5;28mself[39m, graph: BaseGraph, data: Data) [38;5;241m-[39m[38;5;241m>[39m ProblemDef:
[1;32m     78[0m [38;5;250m    [39m[38;5;124;03m"""Build the complete optimization problem.[39;00m
[1;32m     79[0m 
[1;32m     80[0m [38;5;124;03m    The process involves:[39;00m
[0;32m   (...)[0m
[1;32m     93[0m [38;5;124;03m        ValueError: If lambda_reg > 0 but no regularization variable name is provided.[39;00m
[1;32m     94[0m [38;5;124;03m    """[39;00m
[0;32m---> 95[0m     [38;5;28mself[39m[38;5;241m.[39mprocessed_graph, [38;5;28mself[39m[38;5;241m.[39mprocessed_data [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mpreprocess[49m[43m([49m[43mgraph[49m[43m,[49m[43m [49m[43mdata[49m[43m)[49m
[1;32m     96[0m     [38;5;28mself[39m[38;5;241m.[39mproblem [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mcreate_problem([38;5;28mself[39m[38;5;241m.[39mprocessed_graph, [38;5;28mself[39m[38;5;241m.[39mprocessed_data)
[1;32m     98[0m     [38;5;66;03m# Add structured sparsity regularization if needed.[39;00m

File [0;32m~/work/corneto/corneto/corneto/methods/future/carnival.py:190[0m, in [0;36mCarnivalFlow.preprocess[0;34m(self, graph, data)[0m
[1;32m    174[0m [38;5;28;01mdef[39;00m[38;5;250m [39m[38;5;21mpreprocess[39m([38;5;28mself[39m, graph: BaseGraph, data: Data) [38;5;241m-[39m[38;5;241m>[39m Tuple[BaseGraph, Data]:
[1;32m    175[0m [38;5;250m    [39m[38;5;124;03m"""Preprocess the input graph and dataset before optimization.[39;00m
[1;32m    176[0m 
[1;32m    177[0m [38;5;124;03m    This method performs two main preprocessing steps:[39;00m
[0;32m   (...)[0m
[1;32m    188[0m [38;5;124;03m            - The preprocessed dataset with standardized format[39;00m
[1;32m    189[0m [38;5;124;03m    """[39;00m
[0;32m--> 190[0m     pruned_graph, pruned_data [38;5;241m=[39m [43mprune_graph[49m[43m([49m
[1;32m    191[0m [43m        [49m[43mgraph[49m[43m,[49m[43m [49m[43mdata[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mdata_type_key[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mdata_input_key[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mdata_output_key[49m
[1;32m    192[0m [43m    [49m[43m)[49m
[1;32m    194[0m     [38;5;66;03m# We use the inputs/outputs of the dataset to expand the graph into a flow graph[39;00m
[1;32m    195[0m     [38;5;66;03m# inputs = pruned_data.collect_features(self.data_type_key, self.data_input_key)[39;00m
[1;32m    196[0m     [38;5;66;03m# outputs = pruned_data.collect_features(self.data_type_key, self.data_output_key)[39;00m
[1;32m    197[0m     inputs [38;5;241m=[39m pruned_data[38;5;241m.[39mquery[38;5;241m.[39mfilter_features(
[1;32m    198[0m         [38;5;28;01mlambda[39;00m f: f[38;5;241m.[39mdata[38;5;241m.[39mget([38;5;28mself[39m[38;5;241m.[39mdata_type_key, [38;5;28;01mNone[39;00m) [38;5;241m==[39m [38;5;28mself[39m[38;5;241m.[39mdata_input_key
[1;32m    199[0m     )[38;5;241m.[39mpluck_features()

File [0;32m~/work/corneto/corneto/corneto/methods/future/carnival.py:66[0m, in [0;36mprune_graph[0;34m(G, data, property_key, input_key, output_key)[0m
[1;32m     63[0m reachable_inputs [38;5;241m=[39m [38;5;28mset[39m()
[1;32m     64[0m reachable_outputs [38;5;241m=[39m [38;5;28mset[39m()
[0;32m---> 66[0m [38;5;28;01mfor[39;00m sample [38;5;129;01min[39;00m [43mdata[49m[38;5;241;43m.[39;49m[43msamples[49m[38;5;241m.[39mvalues():
[1;32m     67[0m     sample_inputs [38;5;241m=[39m sample[38;5;241m.[39mquery[38;5;241m.[39mselect(
[1;32m     68[0m         [38;5;28;01mlambda[39;00m f: f[38;5;241m.[39mdata[property_key] [38;5;241m==[39m input_key
[1;32m     69[0m     )[38;5;241m.[39mpluck()
[1;32m     71[0m     sample_outputs [38;5;241m=[39m sample[38;5;241m.[39mquery[38;5;241m.[39mselect(
[1;32m     72[0m         [38;5;28;01mlambda[39;00m f: f[38;5;241m.[39mdata[property_key] [38;5;241m==[39m output_key
[1;32m     73[0m     )[38;5;241m.[39mpluck()

[0;31mAttributeError[0m: 'Data' object has no attribute 'samples'

