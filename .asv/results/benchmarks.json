{
    "benchmarks.TimeSuite.time_add_edges": {
        "code": "class TimeSuite:\n    def time_add_edges(self):\n        self.g = Graph()\n        edges = [(i, i+1) for i in range(1000)]\n        self.g.add_edges(edges)\n\n    def setup(self):\n        # Create a graph with at least 1000 edges\n        self.g = Graph()\n        self.num_vertices = 500\n        self.num_edges = 5000\n    \n        # Randomly generate edges for the graph\n        for _ in range(self.num_edges):\n            v1 = random.randint(0, self.num_vertices - 1)\n            v2 = random.randint(0, self.num_vertices - 1)\n            self.g.add_edge(v1, v2)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_add_edges",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "1af7f787be95e2a0e1e05a547765bb8692e421bc915e53f592e669eb9bb05968",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_add_single_edge": {
        "code": "class TimeSuite:\n    def time_add_single_edge(self):\n        self.g = Graph()\n        for i in range(1000):\n            self.g.add_edge(f\"a{i}\", f\"b{i}\")\n\n    def setup(self):\n        # Create a graph with at least 1000 edges\n        self.g = Graph()\n        self.num_vertices = 500\n        self.num_edges = 5000\n    \n        # Randomly generate edges for the graph\n        for _ in range(self.num_edges):\n            v1 = random.randint(0, self.num_vertices - 1)\n            v2 = random.randint(0, self.num_vertices - 1)\n            self.g.add_edge(v1, v2)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_add_single_edge",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "04304111145d73ca82f229a6a4780edf47b163e966a038dd7c487f1e1cb60903",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_add_single_vertex": {
        "code": "class TimeSuite:\n    def time_add_single_vertex(self):\n        self.g = Graph()\n        for _ in range(1000):\n            self.g.add_vertex(\"v\")\n\n    def setup(self):\n        # Create a graph with at least 1000 edges\n        self.g = Graph()\n        self.num_vertices = 500\n        self.num_edges = 5000\n    \n        # Randomly generate edges for the graph\n        for _ in range(self.num_edges):\n            v1 = random.randint(0, self.num_vertices - 1)\n            v2 = random.randint(0, self.num_vertices - 1)\n            self.g.add_edge(v1, v2)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_add_single_vertex",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "4a3b5b0cf06e008bda18de1e436f2012dbca673c2f715fc9ccd8345370b525d6",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_bfs": {
        "code": "class TimeSuite:\n    def time_bfs(self):\n        self.g.bfs(self.g.V[0])\n\n    def setup(self):\n        # Create a graph with at least 1000 edges\n        self.g = Graph()\n        self.num_vertices = 500\n        self.num_edges = 5000\n    \n        # Randomly generate edges for the graph\n        for _ in range(self.num_edges):\n            v1 = random.randint(0, self.num_vertices - 1)\n            v2 = random.randint(0, self.num_vertices - 1)\n            self.g.add_edge(v1, v2)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_bfs",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "e0618253d522627e7ccaea106d01a90d98637e20f2fd289daba01ded37d4f380",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_bfs_rev": {
        "code": "class TimeSuite:\n    def time_bfs_rev(self):\n        self.g.bfs(self.g.V[0], reverse=True)\n\n    def setup(self):\n        # Create a graph with at least 1000 edges\n        self.g = Graph()\n        self.num_vertices = 500\n        self.num_edges = 5000\n    \n        # Randomly generate edges for the graph\n        for _ in range(self.num_edges):\n            v1 = random.randint(0, self.num_vertices - 1)\n            v2 = random.randint(0, self.num_vertices - 1)\n            self.g.add_edge(v1, v2)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_bfs_rev",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "ff455a307cb1070e684b5e69916ec88775a5a5dd87c4408db4fa7f52597fc485",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_in_edges": {
        "code": "class TimeSuite:\n    def time_in_edges(self):\n        list([self.g.in_edges(self.g.V[i]) for i in range(self.g.num_vertices)])\n\n    def setup(self):\n        # Create a graph with at least 1000 edges\n        self.g = Graph()\n        self.num_vertices = 500\n        self.num_edges = 5000\n    \n        # Randomly generate edges for the graph\n        for _ in range(self.num_edges):\n            v1 = random.randint(0, self.num_vertices - 1)\n            v2 = random.randint(0, self.num_vertices - 1)\n            self.g.add_edge(v1, v2)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_in_edges",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "73563860d0f8317afde07264ee8069b2bba66a2286d0f19a6ac63d0c8f642f98",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_out_edges": {
        "code": "class TimeSuite:\n    def time_out_edges(self):\n        list([self.g.out_edges(self.g.V[i]) for i in range(self.g.num_vertices)])\n\n    def setup(self):\n        # Create a graph with at least 1000 edges\n        self.g = Graph()\n        self.num_vertices = 500\n        self.num_edges = 5000\n    \n        # Randomly generate edges for the graph\n        for _ in range(self.num_edges):\n            v1 = random.randint(0, self.num_vertices - 1)\n            v2 = random.randint(0, self.num_vertices - 1)\n            self.g.add_edge(v1, v2)",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_out_edges",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "b5e832ac34133ed4615c32aa962e3f4a2fe53e5dbcdf510506d4f997de34897c",
        "warmup_time": -1
    },
    "version": 2
}