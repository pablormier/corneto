name: Manual Deploy Docs

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to deploy (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  manual-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code at specified tag
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Graphviz
        uses: ts-graphviz/setup-graphviz@v2

      - name: Cache Poetry packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}

      - name: Install Dependencies
        env:
          POETRY_DYNAMIC_VERSIONING_COMMANDS: install,build
        run: |
          set -e
          pip install poetry
          poetry self add "poetry-dynamic-versioning[plugin]"
          poetry install --with dev,docs

      - name: Debug git state and version
        run: |
          echo "=== Git State Debug ==="
          echo "Current commit: $(git rev-parse HEAD)"
          echo "Current ref: ${{ inputs.tag }}"
          echo "Tag at HEAD: $(git describe --tags --exact-match HEAD 2>/dev/null || echo 'No exact tag match')"
          echo "Latest tag: $(git describe --tags --abbrev=0 2>/dev/null || echo 'No tags found')"
          echo "=== Version Debug ==="
          poetry version
          echo "CORNETO __version__: $(poetry run python -c 'import corneto; print(corneto.__version__)')"

      - name: Build Docs
        env:
          SPHINX_VERSION_MATCH: ${{ inputs.tag }}
        run: |
          set -e
          poetry run sphinx-build -b html docs docs/_build/html

      - name: Get GitHub Pages URL via GH CLI
        id: pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "GH CLI version: $(gh --version)"
          echo "Fetching Pages URL for ${{ github.repository }}…"

          if page_url=$(gh api \
            -H "Accept: application/vnd.github.v3+json" \
            /repos/${{ github.repository }}/pages \
            --jq .html_url 2>/dev/null); then
            echo "Retrieved page_url: $page_url"
            echo "PAGE_URL=${page_url}" >> $GITHUB_ENV
            echo "Exported PAGE_URL=${page_url}"
          else
            echo "GitHub Pages not found or not yet activated for this repository."
            default_url="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
            echo "Using default URL: $default_url"
            echo "PAGE_URL=${default_url}" >> $GITHUB_ENV
            echo "Exported PAGE_URL=${default_url}"
          fi

      - name: Generate switcher.json
        run: |
          set -e
          poetry run python docs/switcher.py

      - name: Create root redirect to latest
        run: |
          set -e
          mkdir -p temp_root
          cp docs/switcher.json temp_root/switcher.json
          touch temp_root/.nojekyll

          if [ -f docs/custom-index.html ]; then
            echo "Found custom-index.html, using it…"
            cp docs/custom-index.html temp_root/index.html
          else
            echo "No custom-index.html, copying default-index.html…"
            cp docs/default-index.html temp_root/index.html
          fi

      - name: Remove existing version folders
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          echo "Removing existing folders for tag: ${{ inputs.tag }}"

          # Clone gh-pages branch
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git clone --single-branch --branch gh-pages https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages-temp

          cd gh-pages-temp

          # Remove the specific tag folder
          if [ -d "${{ inputs.tag }}" ]; then
            echo "Removing existing ${{ inputs.tag }} folder"
            rm -rf "${{ inputs.tag }}"
          fi

          # If this is a tag, also remove the main folder (since tags deploy to both)
          if [ -d "main" ]; then
            echo "Removing existing main folder (will be replaced by tag)"
            rm -rf "main"
          fi

          # Commit the removal
          git add -A
          if git diff --staged --quiet; then
            echo "No folders to remove"
          else
            git commit -m "Remove existing docs for ${{ inputs.tag }} rebuild"
            git push
          fi

          cd ..
          rm -rf gh-pages-temp

      - name: Deploy content to root
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./temp_root
          destination_dir: ./
          keep_files: true

      - name: Deploy versioned docs
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
          destination_dir: ${{ inputs.tag }}
          keep_files: true

      - name: Deploy tagged version to main folder
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
          destination_dir: main
          keep_files: true

      - name: Clean up temporary files
        run: rm -rf temp_root
